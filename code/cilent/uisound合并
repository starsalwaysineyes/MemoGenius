import pyaudio
import wave
import threading
import time


import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageDraw, ImageTk
import ctypes
import os
import threading
import time
#import sound
ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID("myappid")
#import func_phpUpload
#from sound import change


is_recording=0
# 创建主窗口

def main():
    def record_button_clicked():
        print("录制按钮被点击")
        global is_recording
        is_recording = 1


    def stop_record_button_clicked():
        global is_recording
        print("结束录制按钮被点击了")
        if is_recording == 1:
            is_recording = 2  # 停止录制音频
            # 执行停止录制音频的相关操作
            record_button.config(state=tk.NORMAL)  # 将录制按钮重新设为可用
            stop_record_button.config(text="上传", command=upload_button_clicked)  # 将结束录制按钮改为上传按钮
            preview_button.config(state=tk.DISABLED)  # 禁用预览按钮

    def upload_button_clicked():
        pass
        # setAllowed = {".wav", ".mp3", ".mp4"}
        
        # # 获取文本框中的内容并赋值给变量
        # user_input = input_entry.get()
        # print("用户输入的内容：", user_input)
        # if user_input[-4:] not in setAllowed:
        #     print("请输入正确的地址！")
        # else:
        #     try:
        #         func_phpUpload.up(user_input)
        #     except:
        #         print("应用端上传文件失败")

    def preview_button_clicked():
        file_path = filedialog.askopenfilename()
        print("选择的文件路径：", file_path)

        # 将文件路径填充到输出框中
        input_entry.insert(tk.END, file_path)

    current_path = os.path.abspath(__file__)
    current_directory = os.path.dirname(current_path)
    jpgpath = current_directory + "\\background.jpg"
    iconpath = current_directory + "\\background.ico"
    window = tk.Tk()
    icon = ImageTk.PhotoImage(file=jpgpath)
    window.iconphoto(True, icon)
    # window.iconbitmap(iconpath)
    window.geometry("800x600")

    window.title("MemoGenius")

    # 创建Canvas组件
    canvas = tk.Canvas(window, width=800, height=600)
    canvas.pack()

    # 生成背景
    image = Image.new("RGB", (800, 600), "black")
    background_2 = current_directory + "\\back_ground2.jpg"
    background_image = Image.open(background_2)
    background_photo = ImageTk.PhotoImage(background_image)

    stars = []

    background_stars = ImageTk.PhotoImage(image)
    canvas.create_image(0, 0, anchor="nw", image=background_photo)

    # 创建输入框、按钮，并绑定点击事件
    input_entry = tk.Entry(window, font=("Helvetica", 18), width=30)
    input_entry.place(relx=0.5, rely=0.7, anchor="center")  # 调整文本框的位置

    record_button = tk.Button(window, text="录制", font=("Helvetica", 18), command=record_button_clicked, bg="lightblue",
                            fg="white")
    stop_record_button = tk.Button(window, text="结束录制", font=("Helvetica", 18), command=stop_record_button_clicked,
                                bg="red", fg="white")
    preview_button = tk.Button(window, text="预览", font=("Helvetica", 18), command=preview_button_clicked, bg="orange",
                            fg="white")

    record_button.place(relx=0.3, rely=0.8, anchor="center")
    stop_record_button.place(relx=0.5, rely=0.8, anchor="center")
    preview_button.place(relx=0.7, rely=0.8, anchor="center")

    # 进入主循环

    window.mainloop()



CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 16000

#from ui import is_recording
#from ui import main

#is_recording=0

def change():
    global is_recording
    is_recording=1


def record_audio(stream, frames, stop_event):
    #实际录制音频
    while not stop_event.is_set():
        data = stream.read(CHUNK)
        frames.append(data)

def wait_for_start(stop_event):
    # 在一个循环中等待开始录制的信号
    global is_recording
    print("wiat_for_start")
    while True:
        if is_recording == 1:
            break
        time.sleep(0.1)
        if is_recording == 2:
            print(f"is recording1={is_recording}")
            break
    #停止录制
    print("stop_event.set()")
    stop_event.set()


def wait_for_stop(stop_event):
    # 清除停止事件的信号
    stop_event.clear()

def record_microphone_audio(output_file):
    p = pyaudio.PyAudio()
    stream = p.open(format=FORMAT,
                    channels=CHANNELS,
                    rate=RATE,
                    input=True,
                    frames_per_buffer=CHUNK)

    stop_event = threading.Event()
    frames = []


    start_thread = threading.Thread(target=wait_for_start, args=(stop_event,))
    stop_thread = threading.Thread(target=wait_for_stop, args=(stop_event,))
    start_thread.start()
    stop_thread.start()

    record_thread = threading.Thread(target=record_audio, args=(stream, frames, stop_event))
    record_thread.start()

    stop_thread.join()
    start_thread.join()
    record_thread.join()

    stream.stop_stream()
    stream.close()
    p.terminate()

    wave_file = wave.open(output_file, 'wb')
    wave_file.setnchannels(CHANNELS)
    wave_file.setsampwidth(p.get_sample_size(FORMAT))
    wave_file.setframerate(RATE)
    wave_file.writeframes(b''.join(frames))
    wave_file.close()


def check_recording_status():
    # 在一个循环中检查全局变量is_recording的值
    print(232)
    global is_recording
    while True:
        if is_recording == 1:
            print(123)
            # 点击了开始录制按钮，开始录制音频
            output_file = "output.mp3"  # 设置输出文件路径
            record_microphone_audio(output_file)
        else:
            # 停止录制音频
            print(456)
            print(f"is_recording={is_recording}")
            time.sleep(0.1)  # 暂停1毫秒
            if is_recording == 2:
                break

# 创建并启动检查录制状态的线程


check_thread = threading.Thread(target=check_recording_status)
check_thread.start()
main()
